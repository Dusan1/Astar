@using System.Diagnostics


<button @onclick="@FindPath">Find Path</button>

<label style="margin-left:50px;">Enter number of obstacles </label>
<input type="number" @bind="@numberOfobstacles" @oninput="OnInputEvent" />


<p>Ellapsed in seconds: <input @bind="ellapsed" /></p>

<div class="wrapper">

    @for (int row = 0; row < allNodes.GetLength(0); row++)
    {
        @for (int column = 0; column < allNodes.GetLength(1); column++)
        {
            int rowToPass = row;
            int columnToPass = column;

            <button class="@css(rowToPass, columnToPass) @rowToPass - @columnToPass" 
                    @onclick="() => SetNode(rowToPass, columnToPass)" style="margin:1%; font-size:xx-small; width:">@rowToPass-@columnToPass  F:@(closedNodes.FirstOrDefault(a =>a.X == row && a.Y == column)?.F.ToString("0.##") ?? "0") <br /> G:@(closedNodes.FirstOrDefault(a =>a.X == row && a.Y == column)?.G.ToString("0.##") ?? "0") H:@(closedNodes.FirstOrDefault(a =>a.X == row && a.Y == column)?.H.ToString("0.##") ?? "0") 
            </button>
        }
    }

</div>




@code {

    public decimal? ellapsed { get; set; }
    private int numberOfobstacles = 3;

    private void OnInputEvent(ChangeEventArgs changeEvent)
    {
        numberOfobstacles = int.TryParse((string?)changeEvent.Value, out int number) ? number : numberOfobstacles;
    }

    bool[,] allNodes = new bool[30,40];

    List<Node> nodes = new List<Node>();
    //List<Node> currentlyCheckingNodes = new List<Node>();


    HashSet<Node> openNodes = new HashSet<Node>();
    HashSet<Node> closedNodes = new HashSet<Node>();

    List<Node> finalPathNodes = new List<Node>();


    int count = 0;
    string css(int row, int column)
    {

        //if (currentlyCheckingNodes.Any(x => x.X == row && x.Y == column))
        //    return "checkingColor";

        var start = nodes.Any(x => x.X == row && x.Y == column && x.IsStart);
        if (start)
            return "startColor";

        var end = nodes.Any(x => x.X == row && x.Y == column && x.IsEnd);
        if (end)
            return "endColor";

        if (finalPathNodes.Any(a => a.X == row && a.Y == column))
        {
            return "pathColor";
        }

        if (nodes.Any(x => x.X == row && x.Y == column && x.IsObstacle))
            return "obstacleColor";

        if (closedNodes.Any(x => x.X == row && x.Y == column))
            return "closedNodeColor";

        if (openNodes.Any(x => x.X == row && x.Y == column))
            return "openNodeColor";

        return "";

    }



    private void SetNode(int row, int column)
    {
        if (count == 0)
        {
            if (!nodes.Any(n => n.X == row && n.Y == column))
            {
                nodes.Add(new Node { X = row, Y = column, IsStart = true });
                count++;
            }
        }
        else if (count > 0 && count <= numberOfobstacles)
        {
            if (!nodes.Any(n => n.X == row && n.Y == column))
            {
                nodes.Add(new Node { X = row, Y = column, IsObstacle = true });
                count++;
            }
        }
        else if (count == numberOfobstacles + 1)
        {
            if (!nodes.Any(n => n.X == row && n.Y == column))
            {
                nodes.Add(new Node { X = row, Y = column, IsEnd = true });
                count++;
            }
        }

    }



    private void FindPath()
    {
        Node startNode = nodes.First(n => n.IsStart);
        Node endNode = nodes.First(n => n.IsEnd);

        Stopwatch stopWatch = new Stopwatch();
        stopWatch.Start();

        openNodes.Add(startNode);

        while (openNodes.Count > 0)
        {
            var currentNode = openNodes.MinBy(node => node.F);

            if (currentNode != null) { openNodes.Remove(currentNode); }

            closedNodes.Add(currentNode);

            var neighbouringNodes = GetNeighbouringNodes(currentNode);
            //await Task.Delay(1);
            foreach (var neighbour in neighbouringNodes)
            {
                //currentlyCheckingNodes.Add(neighbour);
                //StateHasChanged();

                neighbour.G = currentNode.G + GetDistanceBetweenNodes(currentNode, neighbour);
                neighbour.H = GetDistanceBetweenNodes(neighbour, endNode);
                neighbour.Parent = currentNode;
                var ff = neighbour.F;
                if (neighbour == endNode)
                {
                    closedNodes.Add(currentNode);
                    //currentlyCheckingNodes.Clear();

                    ellapsed = ((decimal)(stopWatch.ElapsedMilliseconds))/1000;

                    CalculateFinalPath(startNode, neighbour);
                    return;
                }

                if (nodes.Where(n => n.IsObstacle).Contains(neighbour))
                {
                    continue;
                }

                if (openNodes.Any(on => on == neighbour && on.F <= neighbour.F))
                {  
                    continue;
                }

                if (closedNodes.Contains(neighbour))
                {
                    continue;
                }
                else
                {
                    openNodes.Add(neighbour);
                }

                //currentlyCheckingNodes.Clear();
            }
        }
    }


    private void CalculateFinalPath(Node startNode, Node endNode)
    {

        Node currentNode = endNode;

        while (currentNode != startNode)
        {
            finalPathNodes.Add(currentNode);
            currentNode = currentNode.Parent;
        }

    }

    private decimal GetDistanceBetweenNodes(Node node1, Node node2)
    {
        var dx = Math.Abs(node1.X - node2.X);
        var dy = Math.Abs(node1.Y - node2.Y);

        var regularDistance = 1m;
        var diagonalDistance = (decimal)Math.Sqrt(2);

        return regularDistance * (dx + dy) + (diagonalDistance - 2 * regularDistance) * Math.Min(dx, dy);

        //var x_diff = node1.X - node2.X;
        //var y_diff = node1.Y - node2.Y;

        //return (decimal)Math.Sqrt(x_diff * x_diff + y_diff * y_diff);

    }

    private List<Node> GetNeighbouringNodes(Node node)
    {
        var neighbouringNodes = new List<Node>();
        for (int i = node.X - 1; i <= node.X + 1; i++)
        {
            for (int j = node.Y - 1; j <= node.Y + 1; j++)
            {
                if (i == node.X && j == node.Y)
                    continue;

                neighbouringNodes.Add(new Node() { X = i, Y = j });
            }
        }
        return neighbouringNodes;
    }

    private class Node : IEquatable<Node>
    {
        public int X { get; set; }
        public int Y { get; set; }
        public bool IsStart { get; set; }
        public bool IsEnd { get; set; }
        public bool IsObstacle { get; set; }

        public decimal F { get { return G + H; } }
        public decimal G { get; set; }
        public decimal H { get; set; }


        public Node Parent { get; set; }

        public override bool Equals(object obj) => Equals(obj as Node);

        public override int GetHashCode() => this.X.GetHashCode() ^ this.Y.GetHashCode();

        public bool Equals(Node other) => other != null && other.X == this.X && other.Y == this.Y;

        public static bool operator ==(Node obj1, Node obj2)
        {
            if (ReferenceEquals(obj1, obj2))
            {
                return true;
            }
            if (ReferenceEquals(obj1, null))
            {
                return false;
            }
            if (ReferenceEquals(obj2, null))
            {
                return false;
            }

            return obj1.Equals(obj2);
        }

        public static bool operator !=(Node obj1, Node obj2)
        {
            return !(obj1 == obj2);
        }
    }
    }
